#!/bin/bash

MESSAGE=""
BRANCH="master"
FILES=""
ORG="gentoo"
REPO="gentoo"
ACC=""
URL="github.com"
DESC="PR created by [pkgpr](https://github.com/APN-Pucky/pkgpr)."
FILES=()
CLOSES=""
BUG=""
TEST=""
TEST_FLAGS="--test-feature-scope always"

# from https://stackoverflow.com/a/14203146
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      echo "Usage: pkgpr [options] [files]"
      echo "Options:"
      echo "  -h, --help: Show this help"
      echo "  -a, --account: Account to send PR to"
      echo "  -u, --url: URL of the git server (default: github.com)"
      echo "  -r, --repo: Repository to send PR to (default: gentoo)"
      echo "  -ar, --account-repo: Repository to send PR to"
      echo "  -c, --closes: Issue to close"
      echo "  -b, --bug: Bug to reference"
      echo "  -cp, --copy: Copy from that directory instead of cloning"
      echo "  -o, --org: Organization to send PR to (default: gentoo)"
      echo "  -d, --desc: Description of the PR"
      echo "  -f, --files: Files to add to the PR"
      echo "  -m, --message: PR message"
      echo "  -br, --branch: Branch to send PR to (default: master)"
      echo ""
      echo "Example: pkgpr -a APN-Pucky -r sci app-misc/foo"
      exit 0
      ;;
    -t|--test)
      TEST="1"
      shift
      ;;
    -tf|--test-flags)
      TEST_FLAGS=$2
      shift
      shift
      ;;
    -c|--closes)
      CLOSES="-c $2"
      shift # past argument
      shift # past value
      ;;
    -b|--bug)
      BUG="-b $2"
      shift # past argument
      shift # past value
      ;;
    -a|--account)
      ACC="$2"
      shift # past argument
      shift # past value
      ;;
    -u|--url)
      URL="$2"
      shift # past argument
      shift # past value
      ;;
    -r|--repo)
      REPO="$2"
      shift # past argument
      shift # past value
      ;;
    -ar|--account-repo)
      AREPO="$3"
      shift # past argument
      shift # past value
      ;;
    -cp|--copy)
      COPY="$2"
      shift # past argument
      shift # past value
      ;;
    -o|--org)
        ORG="$2"
        shift # past argument
        shift # past value
        ;;
    -d|--desc)
        DESC="$2"
        shift # past argument
        shift # past value
        ;;
    # message
    -m|--message)
      MESSAGE="$2"
      shift # past argument
      shift # past value
      ;;
    # branch
    -br|--branch)
      BRANCH="$2"
      shift # past argument
      shift # past value
      ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      FILES+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

if [ -z "${AREPO}" ]; then
    AREPO=${REPO}
fi

if [ -z "${ACC}" ]; then
    echo "No account specified"
    exit 1
fi

PRPREFIX=""

if [ -f ../metadata/layout.conf ]; then
    PRPREFIX="$(basename $(pwd))/"
    cd ..
fi

if [ -f ../../metadata/layout.conf ]; then
    PRPREFIX="$(basename $(dirname $(pwd)))/$(basename $(pwd))/"
    cd ../..
fi

if [ -f ../../metadata/layout.conf ]; then
    PRPREFIX="$(basename $(dirname $(dirname $(pwd))))/$(basename $(dirname $(pwd)))/$(basename $(pwd))/"
    cd ../../..
fi

# if no folder folder metadata/layout.conf exists abort, since must run on a gentoo repo
if [ ! -f metadata/layout.conf ]; then
    echo "No metadata/layout.conf found, not a gentoo repo"
    exit 1
fi

OPWD=${PWD}
echo "Adding files: ${FILES[@]} from ${OPWD}"


pushd $(mktemp -d)
# if COPY copy from that dir instead of clone fresh
if [ -n "${COPY}" ]; then
    echo "Copying from ${COPY} to ${REPO}"
    cp -r ${COPY} ./${REPO}
    echo "Copied"
else
    git clone --depth 1 git@${URL}:${ORG}/${REPO}.git -b ${BRANCH}
fi

cd ${REPO}
git checkout ${BRANCH}
NB=pkgpr_${BRANCH}_$(date +%s)
git checkout -b ${NB}

TEST_FILES=""

for file in ${FILES[@]}; do
    dfile=${PRPREFIX}${file}
    # rsync to merge
    rsync -r ${OPWD}/${dfile} $(dirname ${dfile})/
    # remove every .build file in the dir
    find ${dfile} -name ".build" -exec rm -rf {} \;
    # find .ebuilds to append to TEST_FILES
    EBUILD_FILES=$(find ${dfile} -name "*.ebuild" -exec echo -n " -f {}" \;)
    TEST_FILES="${TEST_FILES} ${EBUILD_FILES}"
    # add to git
    git add ${dfile}
done

# 1. Review diff first
git diff HEAD

# 2. then quickly show trivial typos
# if no message 
if [ -z "${MESSAGE}" ]; then
    ARGS="${BUG} ${CLOSES}"
    pkgdev commit ${ARGS}
else
    ARGS="${BUG} ${CLOSES} -m ${MESSAGE}"
    pkgdev commit ${ARGS}
fi

# 3. test it
if [ -n "${TEST}" ]; then
    echo "sudo needed for testing: $ pkg-testing-tool ${TEST_FILES} ${TEST_FLAGS}"
    REPONAME=$(cat ./profiles/repo_name)
    echo "tmp${REPONAME}" > ./profiles/repo_name
    # portage needs that for executing in this folder (i.e. gen manifest), pkgdev commit needs original
    sudo sh -c "chown portage:portage -R .. ; pkg-testing-tool ${TEST_FILES} ${TEST_FLAGS} ; chown $USER:$USER -R .."
    echo "${REPONAME}" > ./profiles/repo_name
fi

git remote add pkgpr_${ACC} git@${URL}:${ACC}/${AREPO}.git


read -p "Send PR? " -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]
then
  git push -u pkgpr_${ACC} ${NB} -o merge_request.create -o merge_request.target_project=${ORG}/${REPO} -o merge_request.target=${BRANCH} -o merge_request.remove_source_branch -o merge_request.description="${DESC}"
  # github does not use the options like gitlab
  # check if github in URL
  if [[ ${URL} == "github.com" ]]; then
    echo "Github detected, opening PR"
    gh pr create -R ${ORG}/${REPO} --fill --base ${BRANCH} --head ${ACC}:${NB} --body "${DESC}"
  fi
fi
popd
